<snippet>
  <description>Sparse Table for Range Minimum Query</description>
  <content><![CDATA[// Sparse Table for Range Minimum Query
// O(n log n) for construction, O(1) for query.
template <class T>
struct sparse_table {
  const vector<T> &v;
  vector<vector<int>> table;
  int height;

  int lg2(int k) {  // returns largest p for which 2^p <= k
    return sizeof(int)*8 - 1 - __builtin_clz(k);
  }

  int argmin(int i, int j) {
    return v[i] < v[j] ? i : j;
  }

  sparse_table(const vector<T> &v) : v(v) {
    height = lg2(v.size());
    table.assign(height+1, vector<int>(v.size()));
    iota(table[0].begin(), table[0].end(), 0);
    for (int h = 0; h < height; ++h) {
      for (int i = 0; i + (1<<h) < v.size(); ++i) {
        table[h+1][i] = argmin(table[h][i], table[h][i + (1<<h)]);
      }
    }
  }

  T rmq(int i, int j) { // => returns minimum of x[i, j)
    int h = lg2(j-i);
    return v[argmin(table[h][i], table[h][j - (1<<h)])];
  }
};
// sparse_table<int> st(v);
]]></content>
  <tabTrigger>sparse_table</tabTrigger>
  <scope>source.c, source.objc, source.c++, source.objc++</scope>
</snippet>


